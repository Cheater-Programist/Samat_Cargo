from aiogram import Bot, Dispatcher, types, executor
import logging, sqlite3

bot = Bot(token='7431398748:AAH8EeYiftjRXlP5POIZAzYRadijPiOyNzg')
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)
connect = sqlite3.connect('users.db')
cursor = connect.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS user(
    id VARCHAR(255),
    username VARCHAR(255),
    first_name VARCHAR(255),
    personal_number INTEGER DEFAULT 0
);
""")
connect.commit()

start_buttons = [
    types.KeyboardButton('–ñ–µ–∫–µ –∫–æ–¥ –∞–ª—É—É'),
    types.KeyboardButton('–ë–∏–∑ –∂”©–Ω“Ø–Ω–¥”© –º–∞–∞–ª—ã–º–∞—Ç'),
    types.KeyboardButton('–ê–¥—Ä–µ—Åüìç'),
    types.KeyboardButton('–ö–∞–Ω–¥–∞–π –∫—ã–ª—ã–ø –∂–µ–∫–µ –∫–æ–¥—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—ã–ª—É—É –∫–µ—Ä–µ–∫?')
]
start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*start_buttons)

@dp.message_handler(commands='start')
async def start(message:types.Message):
        user_id = message.from_user.id
    
        cursor.execute("SELECT personal_number FROM user WHERE id = ?", (user_id,))
        result = cursor.fetchone()

        if result is None:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—É—â–∏–π personal_number –∏–ª–∏ 1159, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
            cursor.execute("SELECT MAX(personal_number) FROM user")
            max_personal_number = cursor.fetchone()[0]
            if max_personal_number is None:
                max_personal_number = 1199
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π personal_number
            new_personal_number = max_personal_number + 1
            
            cursor.execute(
                'INSERT INTO user (id, username, first_name, personal_number) VALUES (?, ?, ?, ?)', 
                (user_id, message.from_user.username, message.from_user.first_name, new_personal_number)
            )
            connect.commit()
            await message.answer(f"–°–∞–ª–∞–º–∞—Ç—Å—ã–∑–±—ã {message.from_user.first_name}\n–ë–∏–∑–¥–∏–Ω samatcargo–≥–æ –∫–æ—à –∫–µ–ª–∏–ø—Å–∏–∑ü§©", reply_markup=start_keyboard) 
        
        else:
            await message.answer(f"–°–∞–ª–∞–º–∞—Ç—Å—ã–∑–±—ã {message.from_user.first_name}\n–ë–∏–∑–¥–∏–Ω samatcargo–≥–æ –∫–æ—à –∫–µ–ª–∏–ø—Å–∏–∑ü§©", reply_markup=start_keyboard) 

@dp.message_handler(text='–ñ–µ–∫–µ –∫–æ–¥ –∞–ª—É—É')
async def personal_number(message:types.Message):
        cursor.execute(f"SELECT personal_number FROM user WHERE id = {message.from_user.id};")   
        connect.commit()
        result = cursor.fetchall()
                
        await message.answer(f"Êî∂Ë¥ß‰∫∫ÔºöÂù¶‰∫åÂõõ({result[0][0]})\nÁîµËØùÔºö17324524246\n\n‰ΩõÂ±±Â∏ÇÂçóÊµ∑Âå∫ÈáåÊ∞¥ÈïáÂæóÊùëÊ®™‰∫îË∑Ø5Âè∑\nÔºàÈô¢ÂÜÖ103‰øÑ‰ªìÔºâÂîõ\nÂ§¥:QYUXO({result[0][0]})+996")

@dp.message_handler(text='–ë–∏–∑ –∂”©–Ω“Ø–Ω–¥”© –º–∞–∞–ª—ã–º–∞—Ç')
async def adress(message:types.Message):
    await message.answer('–ö–ê–†–ì–û | –ö–ò–¢–ê–ô - –û–® | –ö–ê–†–ê -–°–£–£ |\n–¢–µ–∑ —É–±–∞–∫—Ç–∞: 12-18 –∫“Ø–Ω–¥”©\nüíµ 1–∫–≥-3.2$\nüöö –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–¥—ã–Ω –±–∞—Ä–¥—ã–∫ –∞–π–º–∞–∫—Ç–∞—Ä—ã–Ω–∞ –∂–µ—Ç–∫–∏—Ä–∏–ø –±–µ—Ä“Ø“Ø –±–∞—Ä\n–≠“£ –Ω–µ–≥–∏–∑–≥–∏—Å–∏ –±–∏–∑–¥–µ –∞—Ä–∑–∞–Ω –∂–∞–Ω–∞ —Å–∞–ø–∞—Ç—Ç—É—É.ü§ùü´Ç')

@dp.message_handler(text='–ê–¥—Ä–µ—Åüìç')
async def adress(message:types.Message):
    await message.answer('11–¥/1 —É–ª–∏—Ü–∞ –ê–ª–∏—à–µ—Ä–∞ –ù–∞–≤–æ–∏, –û—à')
    await message.answer_location(40.53754426029724, 72.80227876729016)
    with open('img/photo_2024-08-16_11-12-35.jpg', 'rb') as image1:
        await message.answer_photo(image1)
    with open('img/photo_2024-08-16_11-12-36.jpg', 'rb') as image2:
        await message.answer_photo(image2)

@dp.message_handler(text='–ö–∞–Ω–¥–∞–π –∫—ã–ª—ã–ø –∂–µ–∫–µ –∫–æ–¥—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—ã–ª—É—É –∫–µ—Ä–µ–∫?')
async def info(message:types.Message):
    await message.answer("–ö–∏—á–∏–Ω–µ –∫—É—Ç–æ —Ç—É—Ä—É–Ω—É–∑ üòá‚Ä¶")
    # input1_video = 'img/1.MOV'
    # input2_video = 'img/2.MOV'
    # input3_video = 'img/3.MOV'
    output_video_1 = 'img/1_compressed.MOV'
    output_video_2 = 'img/2_compressed.MOV'
    output_video_3 = 'img/3_compressed.MOV'

    # subprocess.run(['ffmpeg', '-i', input1_video, '-vcodec', 'libx265', '-crf', '28', output_video_1])
    # subprocess.run(['ffmpeg', '-i', input2_video, '-vcodec', 'libx265', '-crf', '28', output_video_2])
    # subprocess.run(['ffmpeg', '-i', input3_video, '-vf', 'scale=1280:-2', '-vcodec', 'libx265', '-crf', '40', output_video_3])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ
    with open(output_video_1, 'rb') as video:
        await message.answer_video(video, width=720, height=1280)
    with open(output_video_2, 'rb') as video:
        await message.answer_video(video, width=720, height=1280)
    with open(output_video_3, 'rb') as video:
        await message.answer_video(video, width=720, height=1280)
    
executor.start_polling(dp)